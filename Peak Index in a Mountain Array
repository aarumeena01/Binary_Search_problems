class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int s = 0;
        int e = arr.size()-1;
        int mid = s+(e-s)/2;

        while(s<e){
            if(arr[mid] < arr[mid+1]){
                s = mid +1;
            }
            else{
                e = mid;
            }
            mid = s+(e-s)/2;
        } 
        return s;
    }
};

//  1 code ended 

// second code start  (optimal solution) 
int findPeakElement(vector<int> &arr) {
    int n = arr.size();
    if(n==1) return 0;
    if(arr[0] > arr[1]) return 0;
    if(arr[n-1] > arr[n-2]) return n-1;

    int low=1, high=n-2;
    while(low<=high){
        int mid = (low+high)/2;
        if(arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1]){
            return mid;
        }
        else if(arr[mid] > arr[mid-1]){
                low = mid + 1;
            }
            else{
                high  = mid - 1; 
            }

        }

}
